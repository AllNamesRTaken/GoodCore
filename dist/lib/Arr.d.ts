export declare function flatten<T>(src: any[]): T[];
export declare function reverse<T>(array: T[]): T[];
export declare function concat(...arrs: any[]): any[];
export declare function slice<T>(src: T[], from?: number, count?: number): T[];
export declare function append<T>(arr: T[], values: T[]): void;
export declare function removeAt(arr: any[], index: number): void;
export declare function indexOfElement(src: any[], el: any): number;
export declare function remove(arr: any[], el: any): void;
export declare function indexOf(src: any[], fn: (el: any) => boolean): number;
export declare function removeOneByFn(arr: any[], fn: (el: any) => boolean): void;
export declare function shallowCopy<T>(src: T[]): T[];
export declare function shallowCopyInto<T>(src: T[], target: T[]): void;
export declare function shallowFill<T>(src: T[], target: T[], at?: number): void;
export declare function deepCopy<T>(src: T[]): T[];
export declare function deepCopyInto<T>(src: T[], target: T[]): void;
export declare function deepFill<T>(src: T[], target: T[], at?: number): void;
export declare function filter<T>(src: T[], fn: (el: T, i?: number) => boolean): T[];
export declare function filterInto<T>(src: T[], target: T[], fn: (el: T, i?: number) => boolean): void;
export declare function map<S, T>(src: S[], fn: (el: S, i?: number) => T): T[];
export declare function mapInto<S, T>(src: S[], target: T[], fn: (el: S, i?: number) => T): void;
export declare function reduce<T>(src: T[], fn: (acc: any | number, cur: T) => any | number, start?: any | number): any | number;
export declare function forEach<T>(src: T[], fn: (el: T, i?: number) => any): void;
export declare function until<T>(src: T[], test: (el: T, i?: number) => boolean, fn: (el: T, i?: number) => any): void;
export declare function reverseForEach<T>(src: T[], fn: (el: T, i?: number) => any): void;
export declare function reverseUntil<T>(src: T[], test: (el: T, i?: number) => boolean, fn: (el: T, i?: number) => any): void;
export declare function some<T>(src: T[], filter: (el: T, i?: number) => boolean, fn: (el: T, i?: number) => any): void;
export declare function insertAt<T>(src: T[], pos: number, v: T): void;
export declare function binarySearch<T>(src: T[], cmp: (el: T) => number): number;
